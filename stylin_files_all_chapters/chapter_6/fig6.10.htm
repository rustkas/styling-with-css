<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head><title>Fluid width with faux columns template</title><meta http-equiv="Content-type" content="text/html; charset=iso-8859-1" /><meta http-equiv="Content-Language" content="en-us" /><script type="text/javascript" src="javascript/minmax.js"></script><!--this javascript gives IE the capability to respond to the CSS mi-width and max-widthproperties, which is does not normally support.I use it here to prevent the user crushing the content area down to nothing (min width) or making the browser so wide that lines of text become very long and hard to read (max width).If you have this XHTML file without the javascript file, download it from the author's site athttp://www.doxdesk.com/software/js/minmax.htmlwhere you can find more about it  - note: minmax.js doesn't work on IE mac.--><style type="text/css">/*this version uses absolute/relative positioning between the side columns and their respective faux column containers. *//* se notes on min and max width above/* the content is first in the markup followed by the two side columns*//* this "content-first" markup is good for accessability and search engine optimization */body {font: 1.0em verdana, arial, sans-serif;  /* overal font and sizing */	text-align:center; /* centers the layout in IE */	}* {margin:0; padding:0;} /* removes defaults of all elements */div#mainwrap {min-width:780px; max-width:960px; /* sets the max and miin widths */	margin-left:auto; margin-right:auto; /* centers the layout in SCBs */	text-align:left; /* stops elements inheriting the body's text-center */	}div#header {height:32px; background-color:#CAF; text-align:center;} /* tempoarary placeholder styles for header */div#contentarea { background-color:#FFF; /* ensures bg is white if faux graphic doesn't load */	background:url(images_pres/faux_left.gif) repeat-y top left; /* faux columns graphic left column */	position:relative; /* set positioning context  for left sidebar div */	}div#contentarea2 {background-color:#FFF; /* ensures bg is white if faux graphic doesn't load */	background:url(images_pres/faux_right.gif) repeat-y top right; /* faux columns graphic right column */	position:relative; /* set positioning context  for right sidebar div */	}div#column1 {width:150px; /* left col width */	position: absolute; /* contextual positioning in contentarea container */	top:0px; left:0px; /*positions col within contentarea container */	background-color:#CCC; /* left col bg color - (change color to see divs is position : ) */	overflow:hidden; /* prevents overlarge elements breaking out of column */	}div#column2 {background-color:#FFF; 	margin:0 170px 0 150px; /* left and right margins to make room for sidebars */	}div#column3 {width:170px; 	position:absolute;  /* contextual positioning in contentarea container */	top:0px; right:0px; /*positions col within contentarea container */	background-color:#DDD; /* left col bg color - (change color to see divs is position : ) */	overflow:hidden; /* prevents overlarge elements breaking out of column */	}div#footer {background-color:#FAC; text-align:center; padding-top:6px;} /* temp footer styles *//* some basic styles for placeholder content */div#column1 ul {margin: 20px 0 0 26px;} div#column2 p {font-size:.8em; margin:0 30px 1em ;}div#column3 p {margin: 20px 10px 0 10px;}/* here follows the brillant "no-extra-markup" clearing method devised by Tony Aslett - www.csscreator.com *//* simply add the clearfix class to any containter that must enclose floated elements *//* read the details of how and why this works at http://www.positioniseverything.net/easyclearing.html */.clearfix:after {    content: ".";              /* the period is placed on the page as the last thing before the div closes */	display: block;          /* inline elements don't respond to the clear property */     height: 0;                  /* ensure the period is not visible */    clear: both;               /* make the container clear the period */    visibility: hidden;	     /* further ensures the period is not visible */}.clearfix {display: inline-block;}   /* a fix for IE Mac *//* next a fix for the dreaded Guillotine bug in IE6 *//* Hides from IE-mac \*/* html .clearfix {height: 1%;}.clearfix {display: block;}/* End hide from IE-mac *//* end of "no-extra-markup" clearing method */</style></head><body><div id="mainwrap"><div id="header"><p>A fluid-width faux-columns example</p></div><div id="contentarea" class="clearfix"><div id="contentarea2" class="clearfix"><div id="column2"><p>This layout uses absolute/relative positioning to position the side columns within their respective faux columns containers.</p><p>You can control the maximum and minimum widths of the fluid center area. Once the layout reaches its maximum width, it centers itself in the browser as the window gets wider.</p><p>Nulla scelerisque. Sed tincidunt. Quisque eu nisl. Phasellus    mi ante, aliquet vel, vestibulum sit amet, consectetuer non, ante. Suspendisse    consequat condimentum enim. Morbi vestibulum lorem sit amet enim. Nulla venenatis    fermentum purus.</p>	<p>Nunc justo nisl, vulputate in, sagittis in, pretium sodales,    magna. Nullam felis diam, bibendum ut, dictum in, tincidunt vitae, magna.    Nunc mattis congue leo.</p></div><!--end column2--><div id="column1"><ul><li><a href="#">Link 1</a></li><li><a href="#">Link 2</a></li><li><a href="#">Link 3</a></li></ul></div><!--end column1--><div id="column3"><p>This template uses the Aslett clearing method.</p></div><!--end column3--></div><!--end contentarea2--></div><!--end contentarea--><div id="footer">This is the footer</div></div><!--end mainwrap--></body></html>